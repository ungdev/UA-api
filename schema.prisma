generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id               String               @id
  transactionState TransactionState     @default(pending)
  transactionId    Int?
  paidAt           DateTime?
  userId           String
  user             User                 @relation(fields: [userId], references: [id])
  cartItems        CartItem[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt

  @@index([userId], name: "carts_ibfk_1")
  @@map("carts")
}

model CartItem {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  quantity  Int
  itemId    String
  cartId    String
  forUserId String
  cart      Cart     @relation(fields: [cartId], references: [id])
  user      User     @relation(fields: [forUserId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId], name: "cartitems_ibfk_1")
  @@index([cartId], name: "cartitems_ibfk_2")
  @@index([forUserId], name: "cartitems_ibfk_3")
  @@map("cartitems")
}

model Item {
  id           String       @id
  name         String
  category     ItemCategory
  attribute    String?
  price        Int
  reducedPrice Int?
  infos        String?
  image        String?
  stock        Int?
  cartItems    CartItem[]

  @@map("items")
}

model Team {
  id           String     @id
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  name         String
  lockedAt     DateTime?
  captainId    String
  tournamentId String
  captain      User       @relation(fields: [captainId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  askingUsers  User[]     @relation("teamAskingUsers")
  users        User[]     @relation("teamUsers")

  @@index([captainId], name: "teams_ibfk_1")
  @@index([tournamentId], name: "teams_ibfk_2")
  @@map("teams")
}

model Tournament {
  id                      String @id
  name                    String
  maxPlayers              Int
  playersPerTeam          Int
  toornamentId            String?
  discordRoleId           String?
  discordVocalCategoryId  String?
  discordTextCategoryId   String?
  discordStaffRoleId      String?
  teams                   Team[]

  @@map("tournaments")
}

model User {
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  username      String?
  firstname     String
  lastname      String
  email         String
  password      String
  type          UserType
  permissions   String?
  place         String?
  scannedAt     DateTime?
  discordId     String?
  teamId        String?
  askingTeamId  String?
  registerToken String?
  resetToken    String?
  askingTeam    Team?      @relation("teamAskingUsers", fields: [askingTeamId], references: [id])
  team          Team?      @relation("teamUsers", fields: [teamId], references: [id])
  cartItems     CartItem[]
  carts         Cart[]
  Team          Team[]

  @@index([askingTeamId], name: "users_ibfk_1")
  @@index([teamId], name: "users_ibfk_2")
  @@map("users")
}

model Setting {
  id    String  @id
  value Boolean

  @@map("settings")
}

enum TransactionState {
  pending
  paid
  canceled
  refused
  refunded
}

enum ItemCategory {
  ticket
  item
}

enum UserType {
  player
  coach
  visitor
  orga
}
