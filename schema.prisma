generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id               String           @id
  userId           String
  transactionState TransactionState @default(pending)
  transactionId    Int?
  paidAt           DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  user             User             @relation(fields: [userId], references: [id])
  cartItems        CartItem[]

  @@index([userId], map: "carts_userId_fkey")
  @@map("carts")
}

model CartItem {
  id           String   @id
  itemId       String
  quantity     Int
  price        Int
  reducedPrice Int?
  forcePaid    Boolean  @default(false)
  forUserId    String
  cartId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  cart         Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  forUser      User     @relation(fields: [forUserId], references: [id])
  item         Item     @relation(fields: [itemId], references: [id])

  @@index([cartId], map: "cartitems_cartId_fkey")
  @@index([forUserId], map: "cartitems_forUserId_fkey")
  @@index([itemId], map: "cartitems_itemId_fkey")
  @@map("cartitems")
}

model Item {
  id           String       @id
  name         String
  category     ItemCategory
  attribute    String?
  price        Int
  reducedPrice Int?
  infos        String?      @db.VarChar(300)
  image        String?
  stock        Int?
  cartItems    CartItem[]

  @@map("items")
}

model Setting {
  id    String  @id
  value Boolean

  @@map("settings")
}

model Team {
  id              String       @id
  name            String
  tournamentId    String
  captainId       String       @unique
  lockedAt        DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  discordRoleId   String?
  pokemonPlayerId Int?
  captain         User         @relation(fields: [captainId], references: [id])
  tournament      Tournament   @relation(fields: [tournamentId], references: [id])
  askingUsers     User[]       @relation("teamAskingUsers")
  users           User[]       @relation("teamUsers")

  @@unique([name, tournamentId])
  @@index([id])
  @@index([tournamentId], map: "teams_tournamentId_fkey")
  @@map("teams")
}

model Tournament {
  id                     String @id
  name                   String       @unique
  maxPlayers             Int
  playersPerTeam         Int
  cashprize              Int?
  cashprizeDetails       String?
  displayCashprize       Boolean      @default(false)
  format                 String?
  infos                  String?
  casters                Caster[]
  displayCasters         Boolean      @default(false)
  display                Boolean      @default(false)
  discordRoleId          String?
  discordRespoRoleId     String?
  discordTextCategoryId  String?
  discordVocalCategoryId String?
  teams                  Team[]

  @@map("tournaments")
}

model Caster {
  id           String       @id
  name         String
  tournamentId String
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])

  @@index([tournamentId], map: "casters_tournamentId_fkey")
  @@map("casters")
}

model Partner {
  id      String  @id
  name    String
  link    String
  display Boolean

  @@map("partners")
}

model Log {
  id        String   @id
  userId    String
  method    String
  path      String
  body      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("logs")
}

model User {
  id            String     @id
  username      String?    @unique
  firstname     String
  lastname      String
  email         String?    @unique
  password      String?
  type          UserType?
  age           UserAge
  discordId     String?    @unique
  permissions   String?
  registerToken String?    @unique
  resetToken    String?    @unique
  place         String?    @unique
  customMessage String?
  scannedAt     DateTime?
  attendantId   String?    @unique
  teamId        String?
  askingTeamId  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  askingTeam    Team?      @relation("teamAskingUsers", fields: [askingTeamId], references: [id])
  attendant     User?      @relation("attendantUser", fields: [attendantId], references: [id])
  team          Team?      @relation("teamUsers", fields: [teamId], references: [id])
  cartItems     CartItem[]
  carts         Cart[]
  logs          Log[]
  captainTeam   Team?
  repoItems     RepoItem[] @relation("repoItemUser")
  repoLogs      RepoLog[]  @relation("repoLogUser")
  attended      User?      @relation("attendantUser")

  @@index([id])
  @@index([askingTeamId], map: "users_askingTeamId_fkey")
  @@index([teamId], map: "users_teamId_fkey")
  @@map("users")
}

model RepoItem {
  id        String       @id
  type      RepoItemType
  forUserId String
  zone      String
  pickedUp  Boolean      @default(false)
  user      User         @relation("repoItemUser", fields: [forUserId], references: [id])
  repoLogs  RepoLog[]    @relation("repoLogItem")

  @@index([id])
  @@index([forUserId])
  @@map("repoItem")
}

model RepoLog {
  id        String        @id
  itemId    String
  action    RepoLogAction
  timestamp DateTime      @default(now())
  forUserId String
  item      RepoItem      @relation("repoLogItem", fields: [itemId], references: [id])
  user      User          @relation("repoLogUser", fields: [forUserId], references: [id])

  @@index([id])
  @@index([forUserId])
  @@map("repoLog")
}

enum TransactionState {
  pending
  paid
  canceled
  refused
  refunded
  authorization
}

enum ItemCategory {
  ticket
  supplement
  rent
}

enum UserType {
  player
  orga
  coach
  spectator
  attendant
}

enum UserAge {
  adult
  child
}

enum RepoItemType {
  computer
  monitor
  peripheral
}

enum RepoLogAction {
  added
  removed
}
