generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id               String           @id
  userId           String
  transactionState TransactionState @default(pending)
  transactionId    Int?
  paidAt           DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  user             User             @relation(fields: [userId], references: [id])
  cartItems        CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id
  itemId    String
  quantity  Int
  cartId    String
  forUserId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  forUser   User     @relation(fields: [forUserId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@map("cartitems")
}

model Item {
  id           String       @id
  name         String
  category     ItemCategory
  attribute    String?
  price        Int
  reducedPrice Int?
  infos        String?
  image        String?
  stock        Int?
  cartItems    CartItem[]

  @@map("items")
}

model Setting {
  id    String  @id
  value Boolean

  @@map("settings")
}

model Team {
  id           String         @id
  name         String
  tournamentId TournamentId
  captainId    String         @unique
  lockedAt     DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  captain      User           @relation(fields: [captainId], references: [id])
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  askingUsers  User[]         @relation("teamAskingUsers")
  users        User[]         @relation("teamUsers")

  @@index([id])
  @@unique([name, tournamentId])
  @@map("teams")
}

model Tournament {
  id                     TournamentId  @id
  name                   String  @unique
  maxPlayers             Int
  playersPerTeam         Int
  toornamentId           String?
  discordRoleId          String?
  discordStaffRoleId     String?
  discordVocalCategoryId String?
  discordTextCategoryId  String?
  teams                  Team[]

  @@map("tournaments")
}

model Log {
  id               String     @id
  method           String
  path             String
  body             Json?
  userId           String
  createdAt        DateTime        @default(now())
  user             User            @relation(fields: [userId], references: [id])

  // We create an index on the userId as the search most of the time used with a userId
  @@index([userId])
  @@map("logs")
}

model User {
  id            String     @id
  username      String?
  firstname     String
  lastname      String
  email         String?    @unique
  password      String?
  type          UserType
  permissions   String?
  registerToken String?    @unique
  resetToken    String?    @unique
  place         String?    @unique
  scannedAt     DateTime?
  discordId     String?    @unique
  teamId        String?
  askingTeamId  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  askingTeam    Team?      @relation("teamAskingUsers", fields: [askingTeamId], references: [id])
  team          Team?      @relation("teamUsers", fields: [teamId], references: [id])
  captainTeam   Team?      // This field is used to make prisma work but should never be used
  cartItems     CartItem[]
  carts         Cart[]
  logs          Log[]

  @@index([id])
  @@map("users")
}

enum TransactionState {
  pending
  paid
  canceled
  refused
  refunded
}

enum ItemCategory {
  ticket
  supplement
}

enum UserType {
  player
  coach
  visitor
  orga
}

enum TournamentId {
  lol
  valorant
  csgo
  ssbu
  rl
  tft
}