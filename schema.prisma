generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id               String           @id
  userId           String
  user             User             @relation(fields: [userId], references: [id])

  transactionState TransactionState @default(pending)
  transactionId    Int?

  paidAt           DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt

  cartItems        CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id

  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  quantity  Int

  forUserId String
  forUser   User     @relation(fields: [forUserId], references: [id])

  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("cartitems")
}

model Item {
  id           String       @id
  name         String

  category     ItemCategory
  attribute    String?
  price        Int
  reducedPrice Int?

  infos        String?
  image        String?

  stock        Int?
  cartItems    CartItem[]

  @@map("items")
}

model Setting {
  id    String  @id
  value Boolean

  @@map("settings")
}

model Team {
  id               String       @id
  name             String

  tournamentId     TournamentId
  tournament       Tournament   @relation(fields: [tournamentId], references: [id])

  captainId        String       @unique
  captain          User         @relation(fields: [captainId], references: [id])

  lockedAt         DateTime?

  discordRoleId    String?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt

  askingUsers      User[]       @relation("teamAskingUsers")
  users            User[]       @relation("teamUsers")

  @@unique([name, tournamentId])
  @@index([id])
  @@map("teams")
}

model Tournament {
  id                     TournamentId @id
  name                   String       @unique

  maxPlayers             Int
  playersPerTeam         Int
  teams                  Team[]

  discordRoleId          String?
  discordRespoRoleId     String?
  discordCategoryId      String?

  @@map("tournaments")
}

model Log {
  id        String   @id

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  method    String
  path      String
  body      Json?

  createdAt DateTime @default(now())

  // We create an index on the userId as the search most of the time used with a userId
  @@index([userId])
  @@map("logs")
}

model User {
  id            String     @id
  username      String?    @unique
  firstname     String
  lastname      String
  email         String?    @unique
  password      String?
  type          UserType?
  age           UserAge
  discordId     String?    @unique

  permissions   String?

  registerToken String?    @unique
  resetToken    String?    @unique

  place         String?    @unique
  customMessage String?
  scannedAt     DateTime?

  attendantId   String?    @unique
  attendant     User?      @relation("attendantUser", fields: [attendantId], references: [id])
  attended      User?      @relation("attendantUser")

  teamId        String?
  team          Team?      @relation("teamUsers", fields: [teamId], references: [id])
  askingTeamId  String?
  askingTeam    Team?      @relation("teamAskingUsers", fields: [askingTeamId], references: [id])

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt

  captainTeam   Team?
  cartItems     CartItem[]
  carts         Cart[]
  logs          Log[]

  @@index([id])
  @@map("users")
}

enum TransactionState {
  pending
  paid
  canceled
  refused
  refunded
}

enum ItemCategory {
  ticket
  supplement
}

enum UserType {
  player
  orga
  coach
  spectator
  attendant
}

enum UserAge {
  adult
  child
}

enum TournamentId {
  lolCompetitive
  lolLeisure
  csgo
  ssbu
  rl
  osu
  open
}
