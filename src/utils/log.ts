/* eslint-disable no-console */
import { ConsoleTransportInstance, HttpTransportInstance } from 'winston/lib/winston/transports';
import split from 'split';
import morganMiddleware from 'morgan';
import { createLogger, format, transports } from 'winston';
import moment from 'moment';
import { datadogDevelopment, datadogKey, datadogProduction, isProduction, isProductionDatabase } from './environment';
import { UserRequest } from '../types';
import { getIp } from './network';

// Create console Transport
const { combine, colorize, printf, json } = format;
const timestamp = moment().format('HH:mm:ss');
const consoleTransport = new transports.Console({
  format: combine(
    colorize(),
    printf(({ level, message }) => `${timestamp} ${level}: ${message}`),
  ),
  level: 'silly',
});

const loggingTransports: Array<ConsoleTransportInstance | HttpTransportInstance> = [consoleTransport];

// Create datadog transport
if (isProduction()) {
  const datadogPath = `/v1/input/${datadogKey()}?ddsource=nodejs&service=${
    isProductionDatabase() ? datadogProduction() : datadogDevelopment()
  }`;
  console.info(`Datadog URL: ${datadogPath}`);
  const datadogTransport = new transports.Http({
    host: 'http-intake.logs.datadoghq.com',
    path: datadogPath,
    ssl: true,
    format: json(),
    level: 'http',
  });
  // Log if datadog is unreachable/forbidden
  datadogTransport.on('warn', (warning) => console.warn(`Datadog ${warning}`));

  loggingTransports.push(datadogTransport);
}

// Create the production/development logger
const logger = createLogger({
  transports: loggingTransports,
});

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
logger.error = (error) => {
  if (error instanceof Error) {
    logger.log({ level: 'error', message: `${error.stack || error}` });
  } else {
    logger.log({ level: 'error', message: error });
  }
};

export default logger;

/**
 * Creates a morgan middleware with ip and username varibles
 * The logging is more verbose when in production
 */
export const morgan = () => {
  // Map morgan with winston
  // Split allows to remove the additional newline generated by the stream
  const logStream = split().on('data', (message: string) => logger.http(message));

  // Load morgan variables
  morganMiddleware.token('username', (request: UserRequest) =>
    request.user.username ? request.user.username : 'anonymous',
  );
  morganMiddleware.token('ip', getIp);

  const productionFormat = ':ip :username :method :url :status :res[content-length] - :response-time ms';
  const developmentFormat = ':method :url :status :response-time ms - :res[content-length] - :username';

  return morganMiddleware(isProduction() ? productionFormat : developmentFormat, { stream: logStream });
};
