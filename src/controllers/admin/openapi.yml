/admin/auth/login:
  post:
    summary: Authentifie un admin même si le paramètre login est désactivé
    description: Permet de s'authentifier.<br/>
      **Au moins une permission requise.**
    tags:
      - Admin
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: Nom d'utilisateur
              password:
                type: string
                description: Mot de passe
    responses:
      200:
        description: L'authentification a réussi.
          Les informations de l'utilisateur et le token d'authentification sont renvoyés.
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  type: string
      400:
        $ref: '#/components/responses/400Errored'

/admin/auth/login/{userId}:
  post:
    summary: Authentifie en tant qu'un autre utilisateur
    description: Permet de s'authentifier en tant que n'importe quel utilisateur.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        description: Identifiant de l'utilisateur cible
        schema:
          type: string
        required: true
    responses:
      200:
        description: L'authentification a réussi.
          Les informations de l'utilisateur et le token d'authentification sont renvoyés.
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  type: string
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
/admin/badges:
  post:
    summary: Crée des badges
    description: Crée des badges.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              fields:
                type: array
                description: La liste des badges à créer
                required: true
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [orgas, custom, single, singlecustom]
                      required: true
                    quantity:
                      type: integer
                      description: Le nombre de badges à créer
                    permission:
                      type: string
                      enum: [restricted, orgaprice, fullaccess]
                      description: La permission associée au badge
                    email:
                      type: string
                      description: L'email associé au badge
                    commissionRole:
                      type: string
                      enum: [respo, member]
                      description: Le rôle dans la commission associé au badge
                    commissionId:
                      type: string
                      description: L'identifiant de la commission associée au badge
                    firstname:
                      type: string
                      description: Le prénom associé au badge
                    lastname:
                      type: string
                      description: Le nom associé au badge
                    name:
                      type: string
                      description: Le nom associé au badge
          
    responses:
      201:
        description: Les badges ont bien été créés.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Badge'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      404:
        $ref: '#/components/responses/404UserNotFound'
  
      
/admin/carts/{cartId}/refund:
  post:
    summary: Marque le panier comme étant remboursé
    description: Marque le panier comme étant remboursé.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: cartId
        description: Identifiant du panier à marquer comme étant remboursé
        schema:
          type: string
        required: true
    responses:
      204:
        description: Le panier a bien été marqué comme étant remboursé.
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        description: Aucun panier n'est associé à cet identifiant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Aucun panier n'est associé à cet identifiant

/admin/emails:
  get:
    summary: Récupère tous les emails envoyés via cette route
    description: Récupère les mails envoyés par les admins via le `POST /admin/emails`<br/>
      **Permission 'admin' ou 'anim' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Les mails déjà envoyés par des admins
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Mail'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
  post:
    summary: Envoie un mail d'information
    description: |-
      Envoie un mail d'information à tous les joueurs, coachs et accompagnateurs en fonction des filtres sélectionnés.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MailQuery'
    responses:
      201:
        description: |-
          Le mail a été envoyé. Plus de détails sur le nombre de messages envoyés, le nombre de messages mal formattés
          (à cause d'erreurs spécifiques à une info utilisateur par exemple) et le nombre de messages non envoyés à cause
          d'erreurs inconnues (très probablement erreurs réseau / adresses mail invalides)<br/>
          **Les utilisateurs dont l'adresse email n'a pas été vérifiée ne recevront pas le mail**
        content:
          application/json:
            schema:
              type: object
              properties:
                malformed:
                  type: integer
                delivered:
                  type: integer
                undelivered:
                  type: integer
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/items:
  get:
    summary: Renvoie tous les items de la base de données.
    description: Renvoie toutes les propriétés des items en incluant la valeur left `GET admin/items<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Renvoie tous les items dans la base de données.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdminItem'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
  patch:
    summary: Modifie la position des items
    description: Modifie la position des items.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: La liste des items avec leur nouvelle position
            items:
              type: object
              properties:
                id:
                  type: string
                  description: L'identifiant de l'item
                position:
                  type: integer
                  description: La nouvelle position de l'item

    responses:
      200:
        description: Les items ont bien été modifiés. Leur nouvelle position est renvoyée.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: L'identifiant de l'item
                  position:
                    type: integer
                    description: La nouvelle position de l'item
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
              example:
                error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/items/:itemId:
  patch:
    summary: Change les informations de l'item.
    description:
      Change les informations de l'item ":" nom, catégorie, attribut, prix, informations, image, stock, dates de disponibilité.
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Le nouveau nom de l'item
              category:
                type: string
                description: La nouvelle catégorie de l'item
              attribute:
                type: string
                description: Le nouvel attribut de l'item
              price:
                type: string
                description: Le nouveau prix de l'item
              reducedPrice:
                type: string
                description: Le nouveau prix pour les étudiants UT de l'item (si `null`, il n'y a pas de prix pour les étudiants)
              infos:
                type: string
                description: Les nouvelles informations de l'item
              image:
                type: string
                description: Le lien vers la nouvelle image de l'item
              stockDifference:
                type: integer
                description: La différence de stock de l'item (par exemple, pour passer d'un stock total de 50 à 40, on aurait la valeur -10)
              availableFrom:
                type: string
                format: date-time
                description: La nouvelle date à partir de laquelle l'item sera disponible à la vente
              availableUntil:
                type: string
                format: date-time
                description: La nouvelle date à partir de laquelle l'item ne sera plus disponible à la vente
    responses:
      200:
        description: Change le stock disponible de l'item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminItem'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'

  get:
    summary: Renvoie l'item de la base de données.
    description: Renvoie les propriétés de l'item comme vu dans la base de données `GET admin/items/:itemId`<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Renvoie l'item ainsi que son stock restant.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminItem'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/logs:
  get:
    summary: Récupère les actions effectués par les utilisateurs
    description: Récupère les actions effectués par les utilisateurs.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: query
        name: userId
        schema:
          type: string
      - in: query
        name: teamId
        schema:
          type: string
      - in: query
        name: page
        description: '(Pagination) Indice de la page'
        schema:
          type: integer
          minimum: 0
        required: true

    responses:
      200:
        description: Un tableau de logs<br/>
          **Permission 'admin' requise.**
        content:
          application/json:
            schema:
              type: object
              properties:
                logs:
                  type: array
                  items:
                    $ref: '#/components/schemas/Log'
                pageIndex:
                  type: number
                  example: 1
                pageCount:
                  type: number
                  example: 5
                  description: Le nombre de pages disponibles
                count:
                  type: number
                  example: 128
                  description: Le nombre d'entrées correspondantes
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/partners:
  get:
    summary: Renvoie tous les partenaires de la base de données.
    description: Renvoie toutes les propriétés des partenaires.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Renvoie tous les partenaires dans la base de données.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdminPartner'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
  post:
    summary: Crée un partenaire
    description: Crée un partenaire.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Le nom du partenaire
              link:
                type: string
                description: L'url du partenaire
              description:
                type: string
                description: La description du partenaire
              display:
                type: boolean
                description: Si le partenaire doit être affiché ou non
    responses:
      201:
        description: Le partenaire a bien été créé. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminPartner'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'
  patch:
    summary: Modifie la position des partenaires
    description: Modifie la position des partenaires.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: La liste des partenaires avec leur nouvelle position
            items:
              type: object
              properties:
                id:
                  type: string
                  description: L'identifiant du partenaire
                position:
                  type: integer
                  description: La nouvelle position du partenaire
    responses:
      200:
        description: Les partenaires ont bien été modifiés. Leur nouvelle position est renvoyée.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: L'identifiant du partenaire
                  position:
                    type: integer
                    description: La nouvelle position du partenaire
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/partners/{partnerId}:
  patch:
    summary: Modifie un partenaire
    description: Modifie un partenaire.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: partnerId
        description: Identifiant du partenaire à modifier
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Le nom du partenaire
              link:
                type: string
                description: L'url du partenaire
              description:
                type: string
                description: La description du partenaire
              display:
                type: boolean
                description: Si le partenaire doit être affiché ou non
    responses:
      200:
        description: Le partenaire a bien été modifié. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminPartner'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

  delete:
    summary: Supprime un partenaire
    description: Supprime un partenaire.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: partnerId
        description: Identifiant du partenaire à supprimer
        schema:
          type: string
        required: true
    responses:
      204:
        description: Le partenaire a bien été supprimé.
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/repo/user:
  get:
    summary: Renvoie les items déposés par l'utilisateur scanné
    description: Renvoie les items déposés par l'utilisateur scanné<br/>
      **Permission 'repo' ou 'admin' requise.**<br/>
      *L'utilisateur doit avoir payé, être lock, être du type `player` ou `coach` et avoir été scanné.*
      *Le billet est passé dans la query chiffré et en base64*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: query
        name: id
        schema:
          type: string
        description: Contenu du QR code présent sur le billet chiffré (encodé en base64)
    responses:
      200:
        description: Renvoie les informations de l'utilisateur et son équipe
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoItems'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
      405:
        description: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée

/admin/repo/user/{userId}/items:
  post:
    summary: Notifie le dépot de matériel par un utilisateur
    description: Notifie le dépot de matériel par un utilisateur<br/>
      **Permission 'repo' ou 'admin' requise.**<br/>
      *L'utilisateur doit avoir payé, être lock, être du type `player` ou `coach` et avoir été scanné.*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        schema:
          type: string
          example: A1E4FD
        description: L'id de l'utilisateur qui dépose le matériel
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                description: La liste des items à déposer
                required: true
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [computer, monitor, peripheral]
                      required: true
                    zone:
                      type: string
                      example: A2
                      required: true
    responses:
      201:
        description: Le matériel a bien été déposé
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
      405:
        description: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée

/admin/repo/user/{userId}/items/{itemId}:
  delete:
    summary: Notifie le retrait de matériel par un utilisateur
    description: Notifie le retrait de matériel par un utilisateur<br/>
      **Permission 'repo' ou 'admin' requise.**<br/>
      *L'utilisateur doit avoir payé, être lock, être du type `player` ou `coach` et avoir été scanné.*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        schema:
          type: string
          example: A1E4FD
        description: L'id de l'utilisateur qui récupère le matériel
      - in: path
        name: itemId
        schema:
          type: string
          example: XXXXX
        description: L'id de l'item à récupérer. Cet id est obtenu via `/api/admin/repo/user`
    responses:
      200:
        description: Le matériel a bien été récupéré
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
      405:
        description: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée

/admin/repo/user/{userId}/logs:
  get:
    summary: Récupère toutes les modifications de status de dépôt du matériel d'un utilisateur
    description: Récupère toutes les modifications de status de dépôt du matériel d'un utilisateur<br/>
      **Permission 'repo' ou 'admin' requise.**<br/>
      *L'utilisateur doit avoir payé, être lock, être du type `player` ou `coach` et avoir été scanné.*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        schema:
          type: string
          example: A1E4FD
        description: L'id de l'utilisateur qui récupère le matériel
    responses:
      200:
        description: Renvoie la liste des logs du matériel de l'utilisateur
        content:
          application/json:
            schema:
              type: object
              properties:
                logs:
                  $ref: '#/components/schemas/RepoLogList'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
      405:
        description: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Ce joueur n'a pas été scanné ou son inscription n'a pas été bloquée

/admin/scan/:
  get:
    summary: Renvoie les statistiques de scan de billets
    description: Renvoie les statistiques de scan de billets<br/>
       **Permission 'entry' ou 'admin' requise.**<br/>
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Renvoie les statistiques de scan de billets
        content:
          application/json:
            schema:
              type: object
              properties:
                alreadyScanned:
                  type: integer
                  description: Le nombre de billets déjà scannés
                totalToScan:
                  type: integer
                  description: Le nombre de billets total à scanner

  post:
    summary: Scanne le billet d'un utilisateur
    description: Renvoie les informations de l'utilisateur.<br/>
      **Permission 'entry' ou 'admin' requise.**<br/>
      *Le billet ne doit pas avoir été déjà scanné.*
      *Le billet est passé dans le body et non dans les paramètres car il est chiffré en base64 et peut contenir des slashs*
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              qrcode:
                type: string
                description: Contenu du QR code présent sur le billet chiffré
              userId:
                type: string
                description: Peut remplacer le QR code si la lecture est trop longue/compliquée.
                  Cette propriété ne peut pas être envoyée en même temps que `qrcode`
    responses:
      200:
        description: Renvoie les informations de l'utilisateur et son équipe
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithTeamAndMessageAndTournamentInfo'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        description: Aucun utilisateur n'est associé à ce QR code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: Aucun utilisateur n'est associé à ce QR code
/admin/settings/:settingId:
  patch:
    summary: Modifie un paramètre de la base de données
    description: Modifie un paramètre de la base de données.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: settingId
        description: Identifiant du paramètre à modifier
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              value:
                type: boolean
                description: La nouvelle valeur du paramètre
    responses:
      200:
        description: Le paramètre a bien été modifiée. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: L'identifiant du paramètre
                value:
                  type: boolean
                  description: La valeur du paramètre
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/tournaments:
  get:
    summary: Renvoie tous les tournois de la base de données.
    description: Renvoie toutes les propriétés des tournois.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    responses:
      200:
        description: Renvoie tous les tournois dans la base de données.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdminTournament'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
  patch:
    summary: Modifie la position des tournois
    description: Modifie la position des tournois.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: La liste des tournois avec leur nouvelle position
            items:
              type: object
              properties:
                id:
                  type: string
                  description: L'identifiant du tournoi
                position:
                  type: integer
                  description: La nouvelle position du tournoi
    responses:
      200:
        description: Les tournois ont bien été modifiés. Leur nouvelle position est renvoyée.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: L'identifiant du tournoi
                  position:
                    type: integer
                    description: La nouvelle position du tournoi
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/tournaments/{tournamentId}:
  patch:
    summary: Modifie un tournoi
    description: Modifie un tournoi.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: tournamentId
        description: Identifiant du tournoi à modifier
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Le nom du tournoi
              maxPlayers:
                type: integer
                description: Le nombre maximum de joueurs
              cashprize:
                type: integer
                description: Le cashprize du tournoi
              cashprizeDetails:
                type: string
                description: Les détails du cashprize
              displayCashprize:
                type: boolean
                description: Si le cashprize doit être affiché ou non
              format:
                type: string
                description: Le format du tournoi
              infos:
                type: string
                description: Les informations du tournoi
              casters:
                type: array
                description: Les casters du tournoi
                items:
                  type: string
              displayCasters:
                type: boolean
                description: Si les casters doivent être affichés ou non
              display:
                type: boolean
                description: Si le tournoi doit être affiché ou non

    responses:
      200:
        description: Le tournoi a bien été modifié. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminTournament'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/upload:
  post:
    summary: Upload un fichier
    description: Upload un fichier
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
                description: Le fichier à upload
              path:
                type: string
                description: Le chemin du fichier (dossier d'upload)
              name:
                type: string
                description: Le nom du fichier sans extension
    responses:
      200:
        description: L'opération a bien été envoyé sur l'API distante
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
                  description: 0 pour une opération réussite et 1 pour une opération échouée
                message:
                  type: string
                  description: Le message de l'opération
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/upload/{userId}:
  delete:
    summary: Supprime un fichier
    description: Supprime un fichier<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: query
        name: path
        description: Le chemin complet du fichier (exemple /tournaments/lol.webp)
        schema:
          type: string
        required: true

    responses:
      200:
        description: L'opération a bien été envoyé sur l'API distante
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
                  description: 0 pour une opération réussite et 1 pour une opération échouée
                message:
                  type: string
                  description: Le message de l'opération
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'

/admin/users:
  get:
    summary: Renvoie la liste des utilisateurs et leur équipe
    description: Les champs de recherche renvoient l'utilisateur s'il contient la chaîne de caractères recherchée.
      Les filtres et les champs de recherche sont appliqués entre eux avec un opérateur ET.<br/>
      **Permission 'anim', 'entry' ou 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: query
        name: search
        description: Recherche par nom d'utilisateur, prénom, nom, adresse email, nom d'équipe
        schema:
          type: string
        optional: true
      - in: query
        name: place
        description: Recherche par place
        schema:
          type: string
        optional: true
      - in: query
        name: type
        description: Filtre les utilisateurs par leur type
        schema:
          $ref: '#/components/schemas/Type'
        optional: true
      - in: query
        name: tournament
        description: Filtre les utilisateurs en fonction de l'identifiant de leur tournoi
        schema:
          type: string
        optional: true
      - in: query
        name: locked
        description: Filtre les utilisateurs en fonction de s'ils sont dans une équipe verrouillée ou non
        schema:
          type: boolean
        optional: true
      - in: query
        name: permission
        description: Filtre les utilisateurs en fonction de leurs permissions
        schema:
          $ref: '#/components/schemas/Permission'
        optional: true
      - in: query
        name: scan
        description: Filtre les utilisateurs en fonction de s'ils ont été scannés ou non
        schema:
          type: boolean
        optional: true
      - in: query
        name: payment
        description: Filtre les utilisateurs en fonction de s'ils ont payé ou non
        schema:
          type: boolean
        optional: true
      - in: query
        name: page
        description: '(Pagination) Indice de la page'
        schema:
          type: integer
          minimum: 0
        optional: true
        default: 0
    responses:
      200:
        description: La liste de tous les utilisateurs filtrés est renvoyée
        content:
          application/json:
            schema:
              type: object
              properties:
                itemsPerPage:
                  type: number
                currentPage:
                  type: number
                totalItems:
                  type: number
                totalPages:
                  type: number
                users:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/UserWithTeamAndMessageAndTournamentInfo'
                      - type: object
                        properties:
                          orga:
                            $ref: '#/components/schemas/OrgaData'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
  post:
    summary: Crée un utilisateur
    description: Crée un utilisateur.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
              customMessage:
                type: string
                nullable: true
              email:
                type: string
                format: email
              username:
                type: string
              firstname:
                type: string
              lastname:
                type: string
              age:
                $ref: '#/components/schemas/Age'
    responses:
      201:
        description: L'utilisateur a bien été créé. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithMessage'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        description: L'utilisateur n'est pas authentifié
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              error: L'utilisateur n'est pas authentifié
      403:
        $ref: '#/components/responses/403Unauthorized'
      409:
        $ref: '#/components/responses/409PlaceAlreadyAttributed'

/admin/users/trombi:
  patch:
    summary: Modifie les préférences de confidentialité d'un organisateur et renvoie le nom d'un fichier dans lequel il peut stocker sa photo.
    description: |-
      L'organisateur peut opt-in pour afficher son nom et son prénom, ainsi que pour montrer sa photo de profil.
      Un nom de fichier est renvoyé, qui permet à l'organisateur de stocker son nom de fichier dans
      "<uploads url>/orgas/<nom du fichier>.webp".
      Si un fichier existait déjà, ce fichier est supprimé. Le nom de fichier généré est aléatoire, et ne sera pas le même entre 2 appels de la route.
    tags:
      - Admin
    security:
      BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              displayName:
                type: string
              displayPhoto:
                type: string
    responses:
      200:
        description: Retourne le nom du fichier (sans extension) dans lequel l'utilisateur devrait stocker son image
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  example: dupont-jean-ABCDEF-KJSDOGMEFBQJ
      401:
        $ref: '#/components/responses/401Unauthenticated'

/admin/users/{userId}:
  patch:
    summary: Modifie les informations d'un utilisateur
    description: |-
      Modifie les informations d'un utilisateur.<br/>
      **Permission 'admin' ou 'anim' requise.**<br/><br/>
      **Désambiguïsation:** le champ `permissions` écrase (si renseigné) complètement les anciennes permissions.
      Pour cette raison, il ne faut pas oublier d'y ajouter également les permissions actuelles de l'utilisateur !
      De même pour le champ `roles`.
      <br/>Les orgas qui ont uniquement la permission 'anim' **doivent omettre** le champ `permissions` dans la requête !
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        description: Identifiant de l'utilisateur à modifier
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
                    optional: true
                  place:
                    type: string
                    example: A23
                    nullable: true
                    optional: true
                  type:
                    $ref: '#/components/schemas/Type'
                    optional: true
                  discordId:
                    type: string
                    example: '1420070400000'
                    optional: true
                    nullable: true
                  age:
                    $ref: '#/components/schemas/Age'
                    optional: true
                  email:
                    type: string
                    format: email
                    optional: true
                  username:
                    type: string
                    optional: true
                  firstname:
                    type: string
                    optional: true
                  lastname:
                    type: string
                    optional: true
                  orga:
                    $ref: '#/components/schemas/OrgaData'
                    optional: true
                  orgaMainCommission:
                    type: string
                    optional: true
                    example: coord
              customMessage:
                type: string
                nullable: true
                optional: true
    responses:
      200:
        description: L'utilisateur a bien été modifié. Ses informations sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithMessage'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404UserNotFound:
        $ref: '#/components/responses/404UserNotFound'
      404CommissionNotFound:
        $ref: '#/components/responses/404CommissionNotFound'
      409:
        $ref: '#/components/responses/409PlaceAlreadyAttributed'

/admin/users/{userId}/carts:
  get:
    summary: Renvoie les paniers de l'utilisateur
    description: Renvoie les paniers de l'utilisateur.<br/>
      **Permission 'admin' requise.**
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
    responses:
      200:
        description: Renvoie les paniers de l'utilisateur
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CartWithCartItemsAdmin'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/users/{userId}/force-pay:
  post:
    summary: Valide le paiement d'un utilisateur
    description: Valide le paiement d'un utilisateur.<br/>
      **Permission 'entry' ou 'admin' requise.**<br/>
      *L'utilisateur cible ne doit pas avoir déjà payé sa place.*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        description: Identifiant de l'utilisateur cible
        schema:
          type: string
        required: true
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              consume:
                type: boolean
                default: false
                optional: true
                description: Indique si le paiement doit également consommer le ticket
                  (dans le cas d'un paiement lors de l'entrée)
    responses:
      200:
        description: L'utilisateur est bien marqué comme ayant payé sa place.
          Les informations de l'utilisateur sont renvoyées.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'

/admin/users/{userId}/replace:
  post:
    summary: Remplace un utilisateur par un autre dans une équipe
    description: Remplace un utilisateur (utilisateur remplacé) par un autre (utilisateur remplaçant).<br/>
      **Permission 'admin' requise.**<br/>
      *L'utilisateur remplacé doit être dans une équipe.*
      *Les deux utilisateurs doivent avoir le même type.*
      *L'équipe doit être verrouillée.*
      *Le nouvel utilisateur doit avoir payé sa place.*
    tags:
      - Admin
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: userId
        description: Identifiant de l'utilisateur remplacé
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              replacingUserId:
                type: string
                description: Identifiant de l'utilisateur remplaçant
    responses:
      200:
        description: L'utilisateur remplaçant a bien pris la place de l'utilisateur remplaçé.
          Les informations des deux utilisateurs et de leur équipe sont renvoyées.
        content:
          application/json:
            schema:
              type: object
              properties:
                replacedUser:
                  $ref: '#/components/schemas/User'
                replacingUser:
                  $ref: '#/components/schemas/User'
      400:
        $ref: '#/components/responses/400Errored'
      401:
        $ref: '#/components/responses/401Unauthenticated'
      403:
        $ref: '#/components/responses/403Unauthorized'
      404:
        $ref: '#/components/responses/404UserNotFound'
