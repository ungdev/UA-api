generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  itemId    String
  cartId    String
  forUserId String
  cart      Cart     @relation(fields: [cartId], references: [id])
  user      User     @relation(fields: [forUserId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@map("cartitems")
}

model Cart {
  id               String                @id
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  transactionState cart_transactionState @default(pending)
  transactionId    Int?
  paidAt           DateTime?
  userId           String
  user             User                  @relation(fields: [userId], references: [id])
  cartitems        CartItem[]

  @@map("carts")
}

model Item {
  id           String        @id
  name         String
  category     item_category
  attribute    String?
  price        Int
  reducedPrice Int?
  infos        String?
  image        String?
  stock        Int?
  cartitems    CartItem[]

  @@map("items")
}

model Team {
  id           String     @id
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  lockedAt     DateTime?
  captainId    String     @unique
  tournamentId String
  captain      User       @relation(fields: [captainId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  askingUsers  User[]     @relation("teamAskingUsers")
  users        User[]     @relation("teamUsers")

  @@map("teams")
}

model Tournament {
  id                 String @id
  name               String @unique
  maxPlayers         Int
  playersPerTeam     Int
  toornamentId       String
  discordRoleId      String
  discordStaffRoleId String
  discordCategoryId  String
  teams              Team[]

  @@map("tournaments")
}

model User {
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  username      String?
  firstname     String
  lastname      String
  email         String     @unique
  password      String
  type          user_type
  permissions   String?
  place         String?
  scannedAt     DateTime?
  discordId     String?
  teamId        String?
  askingTeamId  String?
  registerToken String?
  resetToken    String?
  askingTeam    Team?      @relation("teamAskingUsers", fields: [askingTeamId], references: [id])
  team          Team?      @relation("teamUsers", fields: [teamId], references: [id])
  cartitems     CartItem[]
  carts         Cart[]

  Team Team[]
  @@map("users")
}

model Settings {
  id    String @id
  value Boolean

  @@map("settings")
}

enum cart_transactionState {
  pending
  paid
  canceled
  refused
  refunded
}

enum item_category {
  ticket
  item
}

enum user_type {
  player
  coach
  visitor
  orga
}
